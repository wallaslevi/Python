-~-~-~-~-~-~-~-~- Tipos primitivos ~-~-~-~-~-~-~-~-~-

  int()  --> Para números inteiros ------------ 17, 21, 35, 42

  float() -> Números de ponto flutuante ---2.3, 1.6, 14.9, -67.1

  bool() --> Armazena True ou False --------True, False

  str() ----> Conjunto de caracteres -------- 'narigudo', 'Pedro', 'feioso'

  type() ---> Indica o tipo primitivo da var -  x = 'Sapo Tunado'   print(type(x)) logo seu tipo primitivo é string

  variavel.isspace() / variavel.isnumeric() / variavel.isalpha() / variavel.isalnum()
  comando ''is'' serve para verificar se a variavel tem espaço, se é numerica, se é numero e letra, se é só letra entre outros.

  Listas (list)> []
  tuple(): A diferença para Lista é que Tuplas são imutáveis, ou seja, após sua definição, Tuplas não podem ser modificadas.
  sorted(variavel)- faz com que seja mostrado em ordem
 
-~-~-~-~-~-~-~- Operadores Aritméticos ~-~-~-~-~-~-~-

  + -> Adição              ** -> Potencia
  - -> Subtração           // -> Divisão inteira
  * -> Multiplicação        % -> Resto da divisão
  / > Divisão -


           Ordem de Precedência

  1° -> ()
  2° -> **
  3° -> *  /  //  %
  4° -> +  -

-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-


~-~-~-~-~-~-~--~-~-~ Módulos -~-~-~-~-~-~-~-~-~-~-~

  Import > Importa uma biblioteca - import math

  from math import cos -> Importa somente a funçao cos da biblioteca math

  math -> Biblioteca de operadores aritméticos {

     sqrt()  ---> Raiz Quadrada de um numero ------- raiz = math.sqrt(numero)
     floor() ---> Arredonda o numero para baixo ---- 5,23 fica 5,00
     ceil() -----> Retorna um valor inteiro ---------------- 5,23 fica 5
     hypot() ---> Retorna a hipotenusa dos catetos - math.hypot(co, ca)
     pow() ----> Potencia de um numero ---------------- pow(2, 3) = 2³ = 8
     radians()-> Converte em graus radianos ---------- print(math.radians(180))
     cos() -----> Retorne o cosseno em radianos --- print(math.cos(math.radians(x)))
     sin() ------> Retorne o seno em radianos --------- print(math.sin(math.radians(x)))
     tan() -----> Retorne a tangente em radianos---- print(math.tan(math.radians(x)))
  }

  random -> Gerar numeros pseudoaleatorios {

      randint() > Retorna um numero inteiro no range --------------- random.randint(1, 10)
      choice() --> Retorna um elemento aleatório da sequência - random.choice(x)
      shuffle() > Embaralha a sequência x no lugar ------------------- random.shuffle(y)
  }
      biblioteca pygame --- faz varias coisas(esse é um exemplo de como colocar musica)

      pygame.init() -------- inicia a biblioteca
      pygame.mixer.music.load('nome do arquivo que deve estar dentro da pasta.mp3')
      pygame.mixer.music.play() -------- pra iniciar uma musica
      input() atualmente é necessario
      pygame.event.wait()-------- para esperar a musica tocar pra poder encerrar o programa
-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-


-~-~-~-~-~-~-~-~- Manipulando Textos ~-~-~-~-~-~-~-~-

  frase = 'ESTOU APRENDENDO A PROGRAMAR EM PYHTON'

  frase[9] ------> Pega os caracteres das posições indicadas ------------------- letra E
  frase[9:13] -> Pega os caracteres das posições indicadas ------------------- ENDE
  frase[9:18:2]--> Pega os caracteres das posições indicadas pulando 2 - EDNOA
  len() -------------> Mostra quantos caracters tem a frase -------------------------------- len(frase) = 38 caracters
  count() ---------> Conta quantas vezes aparece a letra escolhida ----------- frase.count('s')
  find() ------------> Procura a partir de qual posição dos caracteres escolhidos esta a frase ---------------------------------- frase.find('aprendendo')*obs-nesse caso a partir da posição 6
  replace() ------> Troca uma palavra por outra na frase --------------------------- frase.replace('python','JavaScript')
  upper() ---------> Colocar todas as outras letras em maiúsculo -------------- frase.upper()
  lower() ---------> Colocar todas as outras letras em minusculo -------------- frase.lower()
  capilalize() ---> Coloca todas a frase em minusculo menos a 1 letra --- frase.capitalize()
  title() ------------> Todas as palavras começa com letra maiúscula --------- frase.title()
  strip() -----------> Tira o espaço do começo e no fim da frase  ----------------- frase.strip()  frase.lstrip()  frase.rstrip()
  split() -----------> Vai ocorrer uma divisão entre os espaços da frase ----- frase.split() vai criar uma lista com as frases separadas recomeçando o indice palavra por
  palavra
  .join() -----------> Juntar uma coisa com a outra -------------------------------------- '-'.join.frase Estou-aprendendo-a-programar-em-python
   "in" informa se é algo é true ou false (ex: 'existe' in dentro_da_variavel  ?)
   variavel.index(x)- procura em que posição esta o numero indicado para tuplas.
   max(variavel)-retorna o maior valor da tupla
   min(variavel)-retorna o menor valor da tupla

-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-

for variável in sequência:
    # Bloco de código a ser executado para cada elemento na sequência
    for i in range(1, 6):
    print(i) #percorre de 1 a 5

    while condição:
    # Bloco de código a ser executado enquanto a condição for verdadeira

    -~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-
    mudar as cores no phyton- \033[style;text;backm
    style=0 para sem style,1 para negrito,4 para underline,7 para negative
    text=30 ao 37
    back=40 ao 47
    ex: \033[1;31;40m
     text                    background
 
      30      black        preto      40
      31      red          vermelho   41
      32      green        verde      42
      33      yellow       amarelo    43
      34      blue         azul       44
      35      Magenta      Magenta    45
      36      cyan         ciano      46
      37      grey         cinza      47
      97      white        branco     107
    -~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-
     import datetime
     from datetime import date
     variavel=datetime.escolhe a função ou
     variavel=date.today().year *isso escolhe o ano atual

     -~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-

     break - serve pra interromper uma estrutura de repetição
     